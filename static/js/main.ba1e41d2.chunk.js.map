{"version":3,"sources":["App.tsx","utils/convertBinaryDecimal.ts","reportWebVitals.ts","index.tsx"],"names":["App","useState","input","setInput","isDecimal","setIsDecimal","className","data-testid","type","value","onChange","e","currentTarget","s","textResult","test","split","join","Number","toString","parseInt","String","Decimal","result","resultError","onClick","prevState","width","height","viewBox","fill","xmlns","d","stroke","stroke-width","stroke-linecap","stroke-linejoin","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2MA2GeA,G,MAvGH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEkBF,oBAAS,GAF3B,mBAETG,EAFS,KAEEC,EAFF,KAgChB,OACE,sBAAKC,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,iBACA,oBAAIA,UAAU,YAAd,qDACA,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,mBAAf,UACE,gCAAQF,EAAY,UAAY,WAChC,uBACEE,UAAU,iBACVC,cAAY,QACZC,KAAK,OACLC,MAAOP,EACPQ,SAAU,SAACC,GAAD,OAAOR,EAASQ,EAAEC,cAAcH,UAE5C,mBAAGH,UAAU,eAAb,SAA6BF,EAAY,SAAW,YACpD,qBAAKE,UAAU,iBAAiBC,cAAY,QAA5C,SA7BO,WACb,ICvBmBM,EDuBfC,EAA8B,GAUlC,OATIV,EACE,YAAYW,KAAKb,KACnBY,ECzBO,kBADQD,ED0BKX,EAAMc,MAAM,KAAKC,KAAK,KCzBxBC,OAAOL,GAAGM,SAAS,GAAKN,EAAEM,SAAS,ID4BnD,YAAYJ,KAAKb,KACnBY,EC3Be,SAACD,GAAD,MACR,kBAANA,EAAiBO,SAASP,EAAG,GAAKO,SAASC,OAAOR,GAAI,GD0B1CS,CAAQpB,EAAMc,MAAM,KAAKC,KAAK,MAGxCH,EAmBES,KAEH,mBAAGjB,UAAU,mBAAb,SA9CY,WAClB,IAAIQ,EAA8B,GAUlC,OATIV,EACG,YAAYW,KAAKb,KACpBY,EAAa,0BAGV,YAAYC,KAAKb,KACpBY,EAAa,yBAGVA,EAmCgCU,UAGrC,wBACEhB,KAAK,SACLF,UAAU,MACVC,cAAY,MACZkB,QAAS,WACPpB,GAAa,SAACqB,GAAD,OAAgBA,KAC7BvB,EAAS,KANb,SASE,sBACEwB,MAAM,KACNC,OAAO,KACPC,QAAQ,YACRC,KAAK,OACLC,MAAM,6BALR,UAOE,sBACEC,EAAE,kBACFC,OAAO,UACPC,eAAa,IACbC,iBAAe,QACfC,kBAAgB,UAElB,sBACEJ,EAAE,qFACFC,OAAO,UACPC,eAAa,IACbC,iBAAe,QACfC,kBAAgB,UAElB,sBACEJ,EAAE,kBACFC,OAAO,UACPC,eAAa,IACbC,iBAAe,QACfC,kBAAgB,UAElB,sBACEJ,EAAE,0FACFC,OAAO,UACPC,eAAa,IACbC,iBAAe,QACfC,kBAAgB,oBErFbC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ba1e41d2.chunk.js","sourcesContent":["import './App.scss';\nimport { Decimal, Binary } from 'utils';\nimport { useState } from 'react';\n\nconst App = () => {\n  const [input, setInput] = useState('');\n  const [isDecimal, setIsDecimal] = useState(true);\n\n  const resultError = () => {\n    let textResult: string | number = '';\n    if (isDecimal) {\n      if (!/^[\\d\\s]+$/.test(input)) {\n        textResult = 'Enter a decimal number';\n      }\n    } else {\n      if (!/^[01\\s]+$/.test(input)) {\n        textResult = 'Enter a binary number';\n      }\n    }\n    return textResult;\n  };\n\n  const result = () => {\n    let textResult: string | number = '';\n    if (isDecimal) {\n      if (/^[\\d\\s]+$/.test(input)) {\n        textResult = Binary(input.split(' ').join(''));\n      }\n    } else {\n      if (/^[01\\s]+$/.test(input)) {\n        textResult = Decimal(input.split(' ').join(''));\n      }\n    }\n    return textResult;\n  };\n\n  return (\n    <div className=\"app\">\n      <h1 className=\"title\">Hi,</h1>\n      <h3 className=\"paragraph\">Welcome to the binary/decimal converter</h3>\n      <div className=\"transform\">\n        <div className=\"transform__field\">\n          <label>{isDecimal ? 'Decimal' : 'Binary'}</label>\n          <input\n            className=\"transform__box\"\n            data-testid=\"input\"\n            type=\"text\"\n            value={input}\n            onChange={(e) => setInput(e.currentTarget.value)}\n          />\n          <p className=\"transform__p\">{isDecimal ? 'Binary' : 'Decimal'}</p>\n          <div className=\"transform__box\" data-testid=\"value\">\n            {result()}\n          </div>\n          <p className=\"transform__error\">{resultError()}</p>\n        </div>\n      </div>\n      <button\n        type=\"button\"\n        className=\"btn\"\n        data-testid=\"btn\"\n        onClick={() => {\n          setIsDecimal((prevState) => !prevState);\n          setInput('');\n        }}\n      >\n        <svg\n          width=\"24\"\n          height=\"24\"\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <path\n            d=\"M17 1L21 5L17 9\"\n            stroke=\"#C5640E\"\n            stroke-width=\"2\"\n            stroke-linecap=\"round\"\n            stroke-linejoin=\"round\"\n          />\n          <path\n            d=\"M3 11V9C3 7.93913 3.42143 6.92172 4.17157 6.17157C4.92172 5.42143 5.93913 5 7 5H21\"\n            stroke=\"#C5640E\"\n            stroke-width=\"2\"\n            stroke-linecap=\"round\"\n            stroke-linejoin=\"round\"\n          />\n          <path\n            d=\"M7 23L3 19L7 15\"\n            stroke=\"#C5640E\"\n            stroke-width=\"2\"\n            stroke-linecap=\"round\"\n            stroke-linejoin=\"round\"\n          />\n          <path\n            d=\"M21 13V15C21 16.0609 20.5786 17.0783 19.8284 17.8284C19.0783 18.5786 18.0609 19 17 19H3\"\n            stroke=\"#C5640E\"\n            stroke-width=\"2\"\n            stroke-linecap=\"round\"\n            stroke-linejoin=\"round\"\n          />\n        </svg>\n      </button>\n    </div>\n  );\n};\n\nexport default App;\n","export const Binary = (s: string | number) =>\n  typeof s === 'string' ? Number(s).toString(2) : s.toString(2);\n\nexport const Decimal = (s: string | number) =>\n  typeof s === 'string' ? parseInt(s, 2) : parseInt(String(s), 2);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}